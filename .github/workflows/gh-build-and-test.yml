---
on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: true
      ref-sha:
        required: false
        type: string
        default: ''
      target-device:
        type: string
        required: true
      build-type:
        type: string
        required: true
      build-has-tests:
        required: true
        type: boolean
      python-version:
        required: false
        type: string
        default: "3.12"
      refname:
        required: true
        type: string
      default-branch:
        required: true
        type: string
      cuda-version:
        required: false
        type: string

jobs:
  setup-build:
    name: Setup build
    runs-on: linux-amd64-cpu4
    outputs:
      runner_type: ${{ steps.set_runner.outputs.runner_type }}
    steps:
      - id: set_runner
        run: |
          if [ "${{ inputs.platform }}" = "linux" ]; then
            if [ "${{ github.repository_owner }}" = "nv-legate" ]; then
              echo "runner_type=linux-amd64-cpu16" >> $GITHUB_OUTPUT
            else
              echo "runner_type=ubuntu-latest" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ inputs.platform }}" = "linux-aarch64" ]; then
            echo "runner_type=linux-arm64-cpu16"  >> $GITHUB_OUTPUT
          elif [ "${{ inputs.platform }}" = "mac" ]; then
            echo "runner_type=macos-latest"  >> $GITHUB_OUTPUT
          fi

  build:
    needs: setup-build
    name: "Build (${{ inputs.platform }}, ${{ inputs.target-device }}, ${{ inputs.build-type }}, Python ${{ inputs.python-version }})"
    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-build.yml@v1.42
    with:
      build-has-tests: ${{ inputs.build-has-tests }}
      build-mode: ""
      build-type: ${{ inputs.build-type }}
      client-repo: ${{ github.event.repository.name }}
      client-ref: ${{ inputs.ref-sha }}
      legate-gh-ci-tag: "v1.42"
      network: "ucx"
      platform: ${{ inputs.platform }}
      python-version: ${{ inputs.python-version }}
      runs-on: ${{ needs.setup-build.outputs.runner_type }}
      target-device: ${{ inputs.target-device }}
      use-container: ${{ inputs.platform == 'linux' || inputs.platform == 'linux-aarch64' }}
      setup-python-proxy-cache: true
      timeout: ${{ (inputs.platform == 'linux-aarch64' && inputs.target-device == 'gpu') && 120 || 60 }}
      cuda-version: ${{ inputs.cuda-version }}
    secrets: inherit

  setup-test:
    if: inputs.build-has-tests == true
    name: Setup test
    needs:
      - build
    runs-on: linux-amd64-cpu4
    timeout-minutes: 20
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          set -xeuo pipefail

          MATRIX_JSON='{"include": ['

          RUNNERS=(
            'linux-amd64-gpu-l4-latest-1:gpu:gpu:linux'
            'linux-amd64-gpu-t4-latest-2-llr:gpu:2gpu:linux'
            'linux-amd64-cpu16:cpu:cpu:linux'
            'linux-aarch64-2gpu:gpu:gpu:linux-aarch64'
            'linux-aarch64-2gpu:gpu:2gpu:linux-aarch64'
            'linux-arm64-cpu16:cpu:cpu:linux-aarch64'
            'macos-latest:cpu:cpu:mac')

          TEST_CONFIGS=(
            '1 CPU test:test --cpus 1 --debug:cpu'
            '1 CPU test:test --cpus 1 --debug:gpu'
            '2 CPU test:test --cpus 2 --debug:cpu'
            '2 CPU test:test --cpus 2 --debug:gpu'
            # Set the number of workers manually because nvidia runners report 6
            # gpus when only one is really available this workaround can be
            # removed when the number of available gpus is reported correctly
            # (when we run on VMs)
            'GPU test:test --use cuda --gpus 1 --debug:gpu'
            '2 GPU test:test --use cuda --gpus 2 --debug:2gpu'
            'OpenMP test:test --use openmp --omps 1 --ompthreads 2 --debug:gpu'
            'OpenMP test:test --use openmp --omps 1 --ompthreads 2 --debug:cpu'
            '2 NUMA OpenMPs test:test --use openmp --omps 2 --ompthreads 2 --numamem 2048 --debug:gpu'
            '2 NUMA OpenMPs test:test --use openmp --omps 2 --ompthreads 2 --numamem 2048 --debug:cpu'
            'Eager execution test:test --use eager --debug:gpu'
            'Eager execution test:test --use eager --debug:cpu'
            'mypy:mypy:cpu'
            'Unit tests:unit:cpu'
            'CPP tests:cpp:cpu'
            # TODO: Uncomment the following lines once
            # https://github.com/nv-legate/cupynumeric.internal/issues/654 has
            # been fixed.
            # 'CPP tests:cpp:gpu'
            # 'CPP tests:cpp:2gpu'
          )

          for RUNNER in "${RUNNERS[@]}"; do
            IFS=':' read -ra RUNNER_INFO <<< "$RUNNER"
            RUNNER_NAME=${RUNNER_INFO[0]}
            RUNNER_TYPE=${RUNNER_INFO[1]}
            RUNNER_DEVICE=${RUNNER_INFO[2]}
            RUNNER_PLATFORM=${RUNNER_INFO[3]}

            if [[ "$RUNNER_TYPE" == "${{ inputs.target-device }}" && "$RUNNER_PLATFORM" == "${{ inputs.platform }}" ]]; then

              for TEST_CONFIG in "${TEST_CONFIGS[@]}"; do
                IFS=':' read -ra CONFIG_INFO <<< "$TEST_CONFIG"
                TEST_NAME=${CONFIG_INFO[0]}
                TEST_OPTIONS=${CONFIG_INFO[1]}
                TEST_TARGET_DEVICE=${CONFIG_INFO[2]}

                if [[ "${RUNNER_TYPE}" == "gpu" ]]; then
                  SETUP_PYTHON_PROXY_CACHE=false
                else
                  SETUP_PYTHON_PROXY_CACHE=true
                fi

                # Note: we don't have enough linux-aarch64 GPU runners to
                # support per commit testing. This is why these tests are waived
                # here.
                WAIVE_TEST="${{ inputs.target-device == 'gpu' && inputs.build-type == 'ci' && inputs.platform == 'linux-aarch64' }}"

                if [[ "$TEST_TARGET_DEVICE" == "$RUNNER_DEVICE" ]]; then
                  if [[ "${WAIVE_TEST}" == "false" ]]; then
                    MATRIX_JSON+="{\"runner\": {\"name\": \"$RUNNER_NAME\", \"type\": \"$RUNNER_TYPE\", \"platform\": \"$RUNNER_PLATFORM\", \"setup-python-proxy-cache\": ${SETUP_PYTHON_PROXY_CACHE}}, \"test-config\": {\"name\": \"$TEST_NAME\", \"test-options\": \"$TEST_OPTIONS\"}},"
                  fi
                fi
              done
            fi
          done

          # Remove the trailing comma
          MATRIX_JSON=$(echo "$MATRIX_JSON" | sed 's/,$//')
          # Terminate JSON expression
          MATRIX_JSON+=']}'

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  test:
    needs:
      - setup-test
    name: ${{ matrix.test-config.name }} (${{ inputs.platform }}, ${{ inputs.target-device }})

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-test.outputs.matrix)}}

    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-test-within-container.yml@v1.42
    with:
      build-has-tests: ${{ inputs.build-has-tests }}
      build-mode: ""
      build-type: ${{ inputs.build-type }}
      client-repo: ${{ github.event.repository.name }}
      client-ref: ${{ inputs.ref-sha }}
      has-gpu: ${{ matrix.runner.type == 'gpu' }}
      legate-gh-ci-tag: "v1.42"
      name: ${{ matrix.test-config.name }}
      network: "ucx"
      platform: ${{ inputs.platform }}
      python-version: ${{ inputs.python-version }}
      runs-on: ${{ matrix.runner.name }}
      target-device: ${{ inputs.target-device }}
      test-options: ${{ matrix.test-config.test-options }}
      setup-python-proxy-cache: ${{ matrix.runner.setup-python-proxy-cache }}
      enable-core-dumps: false
      timeout: 150
      cuda-version: ${{ inputs.cuda-version }}
    secrets: inherit

  upload:
    needs: test
    # The use of always() below, ensures the step will run even on failure of the tests
    # before if other conditionals are all true.
    if: ${{ always() && github.repository_owner == 'nv-legate' && contains(github.workflow, 'release') && inputs.build-has-tests == false }}
    name: Upload package to Anaconda Server
    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-upload.yml@v1.42
    with:
      build-has-tests: false
      build-mode: ""
      build-type: ${{ inputs.build-type }}
      client-repo: ${{ github.event.repository.name }}
      client-ref: ${{ inputs.ref-sha }}
      legate-gh-ci-tag: "v1.42"
      name: Upload package to Server
      network: "ucx"
      pkgSubString: "cupynumeric-"
      platform: ${{ inputs.platform }}
      python-version: ${{ inputs.python-version }}
      repos-Root: "cupynumeric"
      target-device: ${{ inputs.target-device }}
      upload-action: upload-package-Anaconda
      refname: ${{ inputs.refname }}
      default-branch: ${{ inputs.default-branch }}
      timeout: 15
      cuda-version: ${{ inputs.cuda-version }}
    secrets: inherit
