on:
  workflow_call:
    inputs:
      build-type:
        required: true
        type: string
      legate-sha:
        type: string
        required: true
      branch:
        type: string
      sha:
        type: string
      repo:
        type: string
      node_type:
        type: string
        default: "cpu16"
      cuda_ver:
        type: string
        default: "12.8.0"
      script:
        type: string
        default: "continuous_integration/scripts/test_wheel_linux.bash"
      matrix_filter:
        type: string
        default: "."

defaults:
  run:
    shell: bash -eou pipefail {0}

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  compute-matrix:
    runs-on: linux-amd64-cpu4
    outputs:
      MATRIX: ${{ steps.compute-matrix.outputs.MATRIX }}
    steps:
      - name: Compute Build Matrix
        id: compute-matrix
        run: |
          set -eo pipefail

          # please keep the matrices sorted in ascending order by the following:
          #
          #     [ARCH, PY_VER, CUDA_VER, LINUX_VER]
          #
          export MATRIX="
          # amd64
          - { ARCH: 'amd64', PY_VER: '3.10', TARGET_DEV: 'gpu', GPU: 'l4', LINUX_VER: 'ubuntu22.04' }
          - { ARCH: 'amd64', PY_VER: '3.11', TARGET_DEV: 'gpu', GPU: 'l4', LINUX_VER: 'ubuntu22.04' }
          - { ARCH: 'amd64', PY_VER: '3.12', TARGET_DEV: 'gpu', GPU: 'l4', LINUX_VER: 'ubuntu24.04' }
          # arm64 - disabled due to ARM GPU runner availability
          # - { ARCH: 'arm64', PY_VER: '3.10', TARGET_DEV: 'gpu', GPU: 'a100', LINUX_VER: 'ubuntu22.04' }
          # - { ARCH: 'arm64', PY_VER: '3.11', TARGET_DEV: 'gpu', GPU: 'a100', LINUX_VER: 'ubuntu22.04' }
          # - { ARCH: 'arm64', PY_VER: '3.12', TARGET_DEV: 'gpu', GPU: 'a100', LINUX_VER: 'ubuntu24.04' }
          "

          MATRIX="$(
            yq -n -o json 'env(MATRIX)' | \
            jq -c '${{ inputs.matrix_filter }} | if (. | length) > 0 then {include: .} else "Error: Empty matrix\n" | halt_error(1) end'
          )"

          echo "MATRIX=${MATRIX}" | tee --append "${GITHUB_OUTPUT}"

  build:
    name: ${{ matrix.ARCH }}, py${{ matrix.PY_VER }}, ${{ matrix.LINUX_VER }}, ${{ matrix.GPU }}
    needs: compute-matrix
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.compute-matrix.outputs.MATRIX) }}
    runs-on: ${{ matrix.ARCH == 'arm64' && 'linux-aarch64-2gpu' || format('linux-{0}-gpu-{1}-latest-1', matrix.ARCH, matrix.GPU) }}
    container:
      image: rapidsai/citestwheel:cuda${{ inputs.cuda_ver }}-${{ matrix.LINUX_VER }}-py${{ matrix.PY_VER }}
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
    steps:
      - name: Get the SHA
        id: get-sha
        run: |
          sha=$(echo ${{github.sha}} | head -c 10)
          echo "sha=$sha" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - name: Add default paths to the env
        run: |
          echo $(pwd)/continuous_integration/scripts/tools >> "${GITHUB_PATH}"
      - name: Run nvidia-smi to make sure GPU is working
        run: nvidia-smi
      - name: Setup proxy cache
        uses: nv-gha-runners/setup-proxy-cache@main
        continue-on-error: true
        # Skip the cache on RDS Lab nodes
        if: ${{ matrix.GPU != 'v100' && matrix.GPU != 'a100' }}
      - name: Get the legate wheel
        id: cache
        env:
          BUILD_NAME: ${{ matrix.ARCH }}-${{ matrix.TARGET_DEV }}-cuda12.5.1-py${{ matrix.PY_VER }}
        # Pin to the v9 release SHA
        uses: dawidd6/action-download-artifact@07ab29fd4a977ae4d2b275087cf67563dfdf0295
        with:
          github_token: ${{ secrets.NV_LEGATE_INTER_REPOS_ACCESS_RO }}
          repo: nv-legate/legate.internal
          workflow: pr.yml
          commit: ${{ inputs.legate-sha }}
          name: "legate-wheel-${{ env.BUILD_NAME }}"
          check_artifacts: true
          path: wheel
      - name: Download the wheel from the build job
        env:
          BUILD_SHA: ${{ steps.get-sha.outputs.sha }}
          BUILD_NAME: ${{ matrix.ARCH }}-${{ matrix.TARGET_DEV }}-cuda12.5.1-py${{ matrix.PY_VER }}
        uses: actions/download-artifact@v4
        with:
          path: final-dist
          name: cupynumeric-wheel-${{ env.BUILD_NAME }}-g${{ env.BUILD_SHA }}
      - name: Run tests
        run: ${{ inputs.script }}
