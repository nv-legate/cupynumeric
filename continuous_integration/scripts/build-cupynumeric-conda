#!/usr/bin/env bash

build_cupynumeric_conda_package() {
    set -xeuo pipefail;

    local python_version="${PYTHON_VERSION:-}";

    if [ -z "${python_version}" ]; then
        python_version="$(python3 --version 2>&1 | cut -d' ' -f2 | cut -d'.' -f3 --complement)";
    fi

    mkdir -p /tmp/conda-build /tmp/out
    cp -r "${ARTIFACTS_DIR}/conda-build/legate" /tmp/conda-build/

    local conda_build_args=();
    conda_build_args+=(--override-channels);
    conda_build_args+=(-c conda-forge);
    # the ucx channel is only necessary as a WAR until the real ucx 1.17 package is available on conda-forge
    conda_build_args+=(-c https://github.com/nv-legate/ucx-package/raw/main);
    conda_build_args+=(-c file:///tmp/conda-build/legate);
    conda_build_args+=(--croot /tmp/conda-build/cupynumeric);
    conda_build_args+=(--numpy 1.22);
    conda_build_args+=(--python ${python_version});
    conda_build_args+=(--no-test);
    conda_build_args+=(--no-verify);
    conda_build_args+=(--no-build-id);
    conda_build_args+=("--build-id-pat=''");
    conda_build_args+=(--no-include-recipe);
    conda_build_args+=(--no-anaconda-upload);

    GPU_ENABLED=true
    [ "${USE_CUDA}" = "OFF" ] && GPU_ENABLED=false

    UPLOAD_BUILD=true
    [ "${UPLOAD_ENABLED:-}" = "OFF" ] && UPLOAD_BUILD=false

    conda_build_args+=(--variants "{gpu_enabled:${GPU_ENABLED},python:${python_version}}");

    rm -rf /tmp/conda-build/cupynumeric;
    mkdir -p /tmp/conda-build/cupynumeric;

    # Synthesize new cupynumeric conda-build build.sh script

    cat <<EOF > "${REPO_DIR}/conda/conda-build/conda_build_config.yaml"
gpu_enabled:
  - "${GPU_ENABLED}"

upload_build:
  - "${UPLOAD_BUILD}"

python:
  - "${python_version}"

numpy_version:
  - ">=1.22,<2"

cmake_version:
  - ">=3.20.1,!=3.23.0"

use_local_path:
  - "true"

numpy:
  - 1.22

package_version:
  - "$(git -C "${REPO_DIR}" describe --abbrev=0 --tags | sed 's/[a-zA-Z]//g' | cut -d '.' -f -2).00"
EOF

    cat <<"EOF" > "${REPO_DIR}/conda/conda-build/build.sh"
# Install cupynumeric C++ libs
tar -C "$PREFIX" --exclude="*.a" --strip-components=1 -xvf /tmp/out/cupynumeric-*-Linux.tar.gz;

# Install cupynumeric Python wheel
pip install --no-deps --root / --prefix "$PREFIX" /tmp/out/cupynumeric-*.whl;
EOF

    git -C "${REPO_DIR}" add .;
    git -C "${REPO_DIR}" commit --allow-empty --allow-empty-message -n -m "";

    # Build cuPyNumeric conda package
    set +ux
    eval "$(conda shell.bash hook)"
    conda deactivate
    conda create -n build
    conda activate build
    set -ux
    conda install boa

    CUDA=${CUDA_VERSION} \
    conda mambabuild ${conda_build_args[@]} "${REPO_DIR}/conda/conda-build";

    git -C "${REPO_DIR}" reset --hard HEAD~1;

    cp /tmp/conda-build/cupynumeric/linux-64/cupynumeric-*.tar.bz2 /tmp/out/;

    { set +x; } 2>/dev/null;
}

(build_cupynumeric_conda_package "$@");
