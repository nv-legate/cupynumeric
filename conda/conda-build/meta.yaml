{% set name = "cunumeric" %}
{% if gpu_enabled == "true" %}
  {% set gpu_enabled_bool = true %}
{% elif gpu_enabled == "false" %}
  {% set gpu_enabled_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set gpu_enabled_bool = false %}
{% endif %}
{% if upload_build == "true" %}
  {% set upload_build_bool = true %}
{% elif upload_build == "false" %}
  {% set upload_build_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set upload_build_bool = false %}
{% endif %}
## The placeholder version is strictly for making two-pass conda build process.
## It should not be used for any other purpose, and this is not a default version.
{% set placeholder_version = '0.0.0.dev' %}
{% set default_cuda_version = '12.2.2' %}
{% set cuda_version='.'.join(environ.get('CUDA', default_cuda_version).split('.')[:2]) %}
{% set cuda_major=cuda_version.split('.')[0]|int %}
{% set py_version=environ.get('CONDA_PY', '') %}
{% if build_number is defined %}
    {# do nothing if defined #}
{% else %}
    {% set build_number = environ.get('GIT_DESCRIBE_NUMBER', '0') %}
{% endif %}
{% if package_version is defined %}
    {% set version = package_version %}
    {% set core_version = version %}
## The tag must be in one of the two formats (where N is a digit):
## vNN.NN.NN
## vNN.NN.NN.dev

## Note: default values are only given to make conda build work. They should not be necessary in principle.
{% elif 'dev' in environ.get('GIT_DESCRIBE_TAG', placeholder_version) %}
    {% set version = (environ.get('GIT_DESCRIBE_TAG', placeholder_version) ~ environ.get('GIT_DESCRIBE_NUMBER', '')).lstrip('v') %}
    {% set core_version = (version.rsplit('.',1)[0] ~ ".dev" ~ "|>=" ~ version.rsplit('.',1)[0]) %}
{% else %}
    {% set version = environ.get('GIT_DESCRIBE_TAG', placeholder_version).lstrip('v') %}
    {% set core_version = version %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
{% if package_tar is defined %}
  url: {{ package_tar }}
{% elif use_local_path is defined %}
  path: ../../
{% else %}
  git_url: ../../
{% endif %}

build:
  skip: true # [not linux]
  number: {{ build_number }}
  missing_dso_whitelist:
    -  '*libcuda.so*'
{% if gpu_enabled_bool %}
{% set cpu_tag='' %}
{% else %}
{% set cpu_tag='_cpu' %}
{% endif %}
{% set upload_tag='' if upload_build_bool else '_with_tests' %}
{% if use_local_path is not defined %}
# use git hash
  string: "cuda{{ cuda_major }}_py{{ py_version }}_{{ GIT_DESCRIBE_HASH }}_{{ PKG_BUILDNUM }}{{ cpu_tag }}{{ upload_tag }}"
{% else %}
# do not use git hash
  string: "cuda{{ cuda_major }}_py{{ py_version }}_{{ PKG_BUILDNUM }}{{ cpu_tag }}{{ upload_tag }}"
{% endif %}
  script_env:
    - SCCACHE_BUCKET
    - SCCACHE_REGION
    - SCCACHE_IDLE_TIMEOUT
    - SCCACHE_S3_KEY_PREFIX
    - SCCACHE_S3_KEY_PREFIX
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
{% if not gpu_enabled_bool %}
    - CPU_ONLY=1
  track_features:
    - cpu_only
{% endif %}

ignore_run_exports_from:
  # scikit-build should really be a part of the build env, but then it installs its own Python.  Conda build stacks 
  # the build environment on the host environment, and the build python takes over causing paths havoc.  So, we put
  # scikit-build into the host env, but we ignore any exports it may bring.
  - scikit-build

requirements:
  build:
    - make
    - ninja
    - cmake {{ cmake_version }}
    - {{ compiler('c') }} =11.2
    - {{ compiler('cxx') }} =11.2
        # the nvcc requirement is necessary because it contains crt/host_config.h used by cuda runtime. This is a packaging bug that has been reported.

    - cuda-nvcc ={{ cuda_version }}
    # cudart needed for CPU and GPU builds because of curand

    - cuda-cudart-dev ={{ cuda_version }}


  host:
    - python
    - scikit-build
    # libcurand is used both in CPU and GPU builds
    - libcurand-dev
    - openblas =* =*openmp*
{% if gpu_enabled_bool %}
    - legate-core >={{ core_version }}
    - cuda-cccl
    - cutensor >=1.3,<2.0 =*_*
    - libcublas-dev
    - libcusolver-dev
    - libcufft-dev
{% else %}
    - legate-core >={{ core_version }} =*_cpu*
{% endif %}

  run:
    - numpy {{ numpy_version }}
    - libnvjitlink
    - libcusparse
    - opt_einsum >=3.3
    - scipy

  run_constrained:
    - __glibc >=2.17  # [linux]
{% if gpu_enabled_bool %}
    - __cuda
{% endif %}

about:
  home: https://github.com/nv-legate/cunumeric
  license: Apache-2.0
  license_file: LICENSE
  summary: 'Drop-in Replacment for NumPy'
  description: |
    cuNumeric is a Legate library that aims to provide
    a distributed and accelerated drop-in replacement
    for the NumPy API on top of the Legion runtime.
  doc_url: https://github.com/nv-legate/cunumeric
  dev_url: https://github.com/nv-legate/cunumeric

extra:
  recipe-maintainers:
    - m3vaz
