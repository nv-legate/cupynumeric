{% set name = "cupynumeric" %}
{% if gpu_enabled == "true" %}
  {% set gpu_enabled_bool = true %}
  {% set cpu_gpu_tag='_gpu' %}
{% elif gpu_enabled == "false" %}
  {% set gpu_enabled_bool = false %}
  {% set cpu_gpu_tag='_cpu' %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set gpu_enabled_bool = false %}
  {% set cpu_gpu_tag='_cpu' %}
{% endif %}

{% if build_tests == "true" %}
  {% set build_tests_bool = true %}
{% elif build_tests == "false" %}
  {% set build_tests_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set build_tests_bool = false %}
{% endif %}
{% if build_tests == "true" %}
  {% set build_tests_bool = true %}
{% elif build_tests == "false" %}
  {% set build_tests_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set build_tests_bool = false %}
{% endif %}
## The placeholder version is strictly for making two-pass conda build process.
## It should not be used for any other purpose, and this is not a default version.
{% set placeholder_version = '0.0.0.dev' %}
{% set default_cuda_version = '12.2.2' %}
{% set cuda_version='.'.join(environ.get('CUDA_VERSION', default_cuda_version).split('.')[:2]) %}
{% set cuda_major=cuda_version.split('.')[0]|int %}
{% set py_version=environ.get('CONDA_PY', '') %}
{% if build_number is defined %}
    {# do nothing if defined #}
{% else %}
    {% set build_number = environ.get('GIT_DESCRIBE_NUMBER', '0') %}
{% endif %}
{% if package_version is defined %}
    {% set version = package_version %}
    {% set legate_version = version %}
## The tag must be in one of the two formats (where N is a digit):
## vNN.NN.NN
## vNN.NN.NN.dev

## Note: default values are only given to make conda build work. They should not be necessary in principle.
{% elif 'dev' in environ.get('GIT_DESCRIBE_TAG', placeholder_version) %}
    {% set version = (environ.get('GIT_DESCRIBE_TAG', placeholder_version) ~ environ.get('GIT_DESCRIBE_NUMBER', '')).lstrip('v') %}
    {% set legate_version_default = (version.rsplit('.',1)[0] ~ ".dev" ~ "|>=" ~ version.rsplit('.',1)[0]) %}
    {% set legate_version = os.environ.get("LEGATE_VERSION", legate_version_default) %}
{% else %}
    {% set version = environ.get('GIT_DESCRIBE_TAG', placeholder_version).lstrip('v') %}
    {% set legate_version = os.environ.get("LEGATE_VERSION", version) %}
{% endif %}
{% set legate_buildstr = "_".join(["py" ~ py_version, "*" ~ cpu_gpu_tag.strip('_'), os.environ.get("LEGATE_BUILDSTR", "") ]) %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
{% if package_tar is defined %}
  url: {{ package_tar }}
{% elif use_local_path is defined %}
  path: ../../
{% else %}
  git_url: ../../
{% endif %}

build:
  skip: true # [not linux]
  number: {{ build_number }}
  missing_dso_whitelist:
    -  '*libcuda.so*'
{% set upload_tag='_with_tests' if build_tests_bool else '' %}
{% if use_local_path is not defined %}
# use git hash
  string: "cuda{{ cuda_major }}_py{{ py_version }}{{ cpu_gpu_tag }}{{ upload_tag }}_{{ GIT_DESCRIBE_HASH }}_{{ PKG_BUILDNUM }}"
{% else %}
# do not use git hash
  string: "cuda{{ cuda_major }}_py{{ py_version }}{{ cpu_gpu_tag }}{{ upload_tag }}_{{ PKG_BUILDNUM }}"
{% endif %}
  script_env:
    - SCCACHE_BUCKET
    - SCCACHE_REGION
    - SCCACHE_IDLE_TIMEOUT
    - SCCACHE_S3_KEY_PREFIX
    - SCCACHE_S3_KEY_PREFIX
    - SCCACHE_S3_USE_SSL
    - SCCACHE_S3_NO_CREDENTIALS
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    - CMAKE_C_COMPILER_LAUNCHER
    - CMAKE_CUDA_COMPILER_LAUNCHER
    - CMAKE_CXX_COMPILER_LAUNCHER
{% if build_tests_bool %}
    - BUILD_TESTS=1
{% endif %}
{% if not gpu_enabled_bool %}
    - CPU_ONLY=1
  # The CPU-only packages having more track_features than the GPU builds helps
  # the solver to prefer the GPU builds when both are viable candidates.
  # ref: https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#track-features
  track_features:
    - cpu_only
{% endif %}

  ignore_run_exports_from:
    # scikit-build should really be a part of the build env, but then it installs its own Python.  Conda build stacks
    # the build environment on the host environment, and the build python takes over causing paths havoc.  So, we put
    # scikit-build into the host env, but we ignore any exports it may bring.
    - scikit-build
    # We want to ignore any cuda related exports and we will redefine them ourselves with looser pins.
    - cuda-version
    - cuda-cudart
    - cuda-cudart-dev
    - libcublas
    - libcublas-dev
    - libcurand-dev
    - cuda-nvcc
    - cuda-cccl
    - libcusolver
    - libcusolver-dev
    - libcufile
    - libcufile-dev
    - libcufft
    - libcufft-dev

requirements:
  build:
    - make
    - ninja
    - cmake {{ cmake_version }}
    - {{ compiler('c') }} =11.2
    - {{ compiler('cxx') }} =11.2
    # the nvcc requirement is necessary because it contains crt/host_config.h used by cuda runtime. This is a packaging bug that has been reported.
    - cuda-nvcc
    # cudart needed for CPU and GPU builds because of curand
    - cuda-cudart-dev
    - cuda-version ={{ cuda_version }}
    - libcurand-dev

  host:
    - python
    - scikit-build
    # Versions after v0.3.23 conflict with Realm's OpenMP runtime
    # see https://github.com/nv-legate/cupynumeric.internal/issues/342
    - openblas <=0.3.23 =*openmp*
    - legate ={{ legate_version }}=*{{ legate_buildstr }}
{% if gpu_enabled_bool %}
    - cuda-cccl
    - cutensor >=2.0 =*_*
    - libcublas-dev
    - libcusolver-dev
    - libcufft-dev
    - libcurand-dev
    - libcufile-dev
    - cuda-version ={{ cuda_version }}
    - libcusolvermp-dev
    - libcal-dev
{% endif %}

  run:
    - cffi
    - numpy {{ numpy_version }}
    - opt_einsum >=3.3
    - scipy
    # Versions after v0.3.23 conflict with Realm's OpenMP runtime
    # see https://github.com/nv-legate/cupynumeric.internal/issues/342
    - openblas <=0.3.23 =*openmp*
{% if gpu_enabled_bool %}
    - __cuda
    - {{ pin_compatible('cuda-version', min_pin='x', max_pin='x') }}
    - {{ pin_compatible('cuda-cudart',  min_pin='x', max_pin='x') }}
    - {{ pin_compatible('libcublas',    min_pin='x', max_pin='x') }}
    - {{ pin_compatible('cuda-nvtx',    min_pin='x', max_pin='x') }}
    - {{ pin_compatible('libcusolver',  min_pin='x', max_pin='x') }}
    - {{ pin_compatible('libcufile',    min_pin='x', max_pin='x') }}
    - {{ pin_compatible('libcufft',    min_pin='x', max_pin='x') }}
    - cutensor >=2.0 =*_*              # versioned independently of CUDA
    - nccl >=2.0,<3
    - cupy
    - libnvjitlink
{% endif %}

  run_constrained:
    - __glibc >=2.17  # [linux]

about:
  home: https://github.com/nv-legate/cupynumeric
  license: Apache-2.0
  license_file: LICENSE
  summary: 'Drop-in Replacment for NumPy'
  description: |
    cuPyNumeric is a Legate library that aims to provide
    a distributed and accelerated drop-in replacement
    for the NumPy API on top of the Legion runtime.
  doc_url: https://github.com/nv-legate/cupynumeric
  dev_url: https://github.com/nv-legate/cupynumeric

extra:
  recipe-maintainers:
    - m3vaz
